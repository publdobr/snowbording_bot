const { Markup, Scenes } = require('telegraf');
const { getSheetData } = require('../utils/googleSheets');
const { sendToManager } = require('../utils/sendToManager');

// –°—Ü–µ–Ω–∞ –ø–æ–¥–±–æ—Ä–∞ —Å–Ω–æ—É–±–æ—Ä–¥–æ–≤
const boardsScene = new Scenes.WizardScene(
  'boards',
  // –®–∞–≥ 1: –û–ø—ã—Ç
  (ctx) => {
    ctx.reply('–ö–∞–∫ —á–∞—Å—Ç–æ –∫–∞—Ç–∞–µ—à—å—Å—è?', Markup.inlineKeyboard([
      [Markup.button.callback('–ù–∞—á–∏–Ω–∞—é—â–∏–π', 'exp_beginner')],
      [Markup.button.callback('–°—Ä–µ–¥–Ω–∏–π', 'exp_intermediate')],
      [Markup.button.callback('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', 'exp_advanced')],
    ]));
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°—Ç–∏–ª—å
  (ctx) => {
    ctx.wizard.state.experience = ctx.callbackQuery.data.split('_')[1];
    ctx.reply('–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –Ω—Ä–∞–≤–∏—Ç—Å—è?', Markup.inlineKeyboard([
      [Markup.button.callback('–ü—Ä—ã–∂–∫–∏', 'style_freestyle')],
      [Markup.button.callback('–§—Ä–∏—Ä–∞–π–¥', 'style_freeride')],
      [Markup.button.callback('–£–Ω–∏–≤–µ—Ä—Å–∞–ª', 'style_allmountain')],
    ]));
    return ctx.wizard.next();
  },
  // –®–∞–≥ 3: –†–æ—Å—Ç –∏ –≤–µ—Å
  (ctx) => {
    ctx.wizard.state.style = ctx.callbackQuery.data.split('_')[1];
    ctx.reply('–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –∏ –≤–µ—Å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180 —Å–º, 75 –∫–≥)');
    return ctx.wizard.next();
  },
  // –®–∞–≥ 4: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
  async (ctx) => {
    ctx.wizard.state.hw = ctx.message.text;
    const { experience, style } = ctx.wizard.state;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å–∫–∏
    const boards = await getSheetData('–î–æ—Å–∫–∏');

    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ (–º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
    const recommendedBoards = boards.filter(board =>
      board['–°—Ç–∏–ª—å'].toLowerCase().includes(style) &&
      board['–£—Ä–æ–≤–µ–Ω—å'].toLowerCase().includes(experience)
    ).slice(0, 3); // –ë–µ—Ä–µ–º –Ω–µ –±–æ–ª—å—à–µ 3

    if (recommendedBoards.length > 0) {
      ctx.reply('–í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å:');
      recommendedBoards.forEach(board => {
        ctx.replyWithHTML(`<b>${board['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>\n${board['–û–ø–∏—Å–∞–Ω–∏–µ']}`);
      });
      ctx.reply('–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π?', Markup.inlineKeyboard([
        [Markup.button.callback('–î–∞, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', 'contact_manager')],
        [Markup.button.callback('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', 'cancel')],
      ]));
    } else {
      ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç?', Markup.inlineKeyboard([
        [Markup.button.callback('–î–∞, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', 'contact_manager')],
        [Markup.button.callback('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', 'cancel')],
      ]));
    }
    return ctx.wizard.next();
  },
  // –®–∞–≥ 5: –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  (ctx) => {
    if (ctx.callbackQuery && ctx.callbackQuery.data === 'contact_manager') {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
      return ctx.wizard.next();
    }
    ctx.reply('–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º—ã –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å!');
    return ctx.scene.leave();
  },
  (ctx) => {
    ctx.wizard.state.name = ctx.message.text;
    ctx.reply('–¢–µ–ø–µ—Ä—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.phone = ctx.message.text;
    ctx.wizard.state.telegram = ctx.from.username;

    const { name, phone, telegram, experience, style, hw } = ctx.wizard.state;
    const message = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–±–æ—Ä —Å–Ω–æ—É–±–æ—Ä–¥–∞!\n\n–û–ø—ã—Ç: ${experience}\n–°—Ç–∏–ª—å: ${style}\n–†–æ—Å—Ç/–≤–µ—Å: ${hw}\n\n–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nTelegram: @${telegram}`;

    sendToManager(ctx, message);

    ctx.reply('–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üèîÔ∏è');
    return ctx.scene.leave();
  }
);

module.exports = { boardsScene };
