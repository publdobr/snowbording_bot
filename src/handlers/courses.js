const { Markup, Scenes, session } = require('telegraf');
const { getSheetData } = require('../utils/googleSheets');
const { sendToManager } = require('../utils/sendToManager');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const coursesScene = new Scenes.WizardScene(
  'courses',
  // –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  (ctx) => {
    ctx.reply('–ö–∞—Ç–∞–ª–∏—Å—å –ª–∏ —É –Ω–∞—Å —Ä–∞–Ω—å—à–µ?', Markup.inlineKeyboard([
      [Markup.button.callback('–î–∞! –•–æ—á—É –µ—â—ë!', 'returning_student')],
      [Markup.button.callback('–ù–µ—Ç, –Ω–æ –µ—Å—Ç—å –æ–ø—ã—Ç', 'experienced_student')],
      [Markup.button.callback('–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫', 'new_student')],
    ]));
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –í—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
  async (ctx) => {
    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    const userLevel = ctx.callbackQuery.data;
    const courses = await getSheetData('–ö—É—Ä—Å—ã');
    let filteredCourses;

    if (userLevel === 'new_student') {
      filteredCourses = courses.filter(course => course['–£—Ä–æ–≤–µ–Ω—å'] === '–ë–∞–∑–æ–≤—ã–π');
    } else {
      filteredCourses = courses.filter(course => course['–£—Ä–æ–≤–µ–Ω—å'] !== '–ë–∞–∑–æ–≤—ã–π');
    }

    ctx.wizard.state.courses = filteredCourses;

    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:', Markup.inlineKeyboard([
      [Markup.button.callback('–ì–æ—Ä–æ–¥', 'filter_city')],
      [Markup.button.callback('–î–∞—Ç—ã', 'filter_dates')],
      [Markup.button.callback('–ö—É—Ä—Å', 'filter_course')],
    ]));

    return ctx.wizard.next();
  },
  // –®–∞–≥ 3: –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
  async (ctx) => {
    const filterType = ctx.callbackQuery.data.split('_')[1];
    const courses = ctx.wizard.state.courses;
    const filterValues = [...new Set(courses.map(course => course[filterType.charAt(0).toUpperCase() + filterType.slice(1)]))];

    ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ ${filterType}:`, Markup.inlineKeyboard(
      filterValues.map(value => [Markup.button.callback(value, `select_${filterType}_${value}`)])
    ));

    return ctx.wizard.next();
  },
  // –®–∞–≥ 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
  async (ctx) => {
    const [,, filterType, filterValue] = ctx.callbackQuery.data.split('_');
    const courses = ctx.wizard.state.courses;
    const filteredCourses = courses.filter(course => course[filterType.charAt(0).toUpperCase() + filterType.slice(1)] === filterValue);

    ctx.wizard.state.selectedCourses = filteredCourses;

    ctx.reply('–í–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏:', Markup.inlineKeyboard(
      filteredCourses.map(course => [Markup.button.callback(course['–ö—É—Ä—Å'], `details_${course['–ö—É—Ä—Å']}`)])
    ));

    return ctx.wizard.next();
  },
  // –®–∞–≥ 5: –î–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞
  (ctx) => {
    const courseName = ctx.callbackQuery.data.split('_')[1];
    const course = ctx.wizard.state.selectedCourses.find(c => c['–ö—É—Ä—Å'] === courseName);
    ctx.wizard.state.selectedCourse = course;
    ctx.replyWithHTML(`<b>${course['–ö—É—Ä—Å']}</b>\n\n${course['–û–ø–∏—Å–∞–Ω–∏–µ']}\n\n<a href="${course['–°—Å—ã–ª–∫–∞']}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ...</a>`);
    ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?', Markup.inlineKeyboard([
      [Markup.button.callback('–î–∞', 'enroll')],
      [Markup.button.callback('–ù–µ—Ç', 'cancel')],
    ]));
    return ctx.wizard.next();
  },
  // –®–∞–≥ 6: –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  (ctx) => {
    if (ctx.callbackQuery.data === 'enroll') {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
      return ctx.wizard.next();
    }
    ctx.reply('–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º—ã –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å!');
    return ctx.scene.leave();
  },
  (ctx) => {
    ctx.wizard.state.name = ctx.message.text;
    ctx.reply('–¢–µ–ø–µ—Ä—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.phone = ctx.message.text;
    ctx.wizard.state.telegram = ctx.from.username;

    const { name, phone, telegram, selectedCourse } = ctx.wizard.state;
    const message = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å!\n\n–ö—É—Ä—Å: ${selectedCourse['–ö—É—Ä—Å']}\n–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nTelegram: @${telegram}`;

    sendToManager(ctx, message);

    ctx.reply('–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üåû');
    return ctx.scene.leave();
  }
);

module.exports = { coursesScene };
